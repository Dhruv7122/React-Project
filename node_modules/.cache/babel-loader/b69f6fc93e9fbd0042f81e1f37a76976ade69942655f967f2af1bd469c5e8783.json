{"ast":null,"code":"const URL = 'http://localhost:8000';\n\n// Define a type for the cart item (adjust according to your API response structure)\n\nexport const fetchUserCartFromDatabase = async userId => {\n  try {\n    const response = await fetch(`${URL}/reactcart/${userId}`); // Adjust the API endpoint as per your backend setup\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.cartItems; // Assuming response data contains the cart items\n  } catch (error) {\n    console.error('Error fetching user cart:', error);\n    throw new Error('Failed to fetch user cart data');\n  }\n};\nexport const getAllProducts = async () => {\n  try {\n    const response = await fetch(`${URL}/products`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch products\");\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    return []; // or handle error as needed (throw, return default data, etc.)\n  }\n};\nexport const getProductById = async id => {\n  try {\n    const response = await fetch(`${URL}/products/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch product');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching product:', error);\n    throw error; // Rethrow the error or handle as needed\n  }\n};","map":{"version":3,"names":["URL","fetchUserCartFromDatabase","userId","response","fetch","ok","Error","status","data","json","cartItems","error","console","getAllProducts","log","getProductById","id"],"sources":["C:/DHRUV/reactTask/Archive/src/Service/product.ts"],"sourcesContent":["export type ProductType = {\n    _id: string;\n    name: string;\n    price: number;\n    description: string;\n    image: string;\n    quantity: number;\n    category:string;\n    __v:number;\n  };\n\n  const URL = 'http://localhost:8000'\n  \n// Define a type for the cart item (adjust according to your API response structure)\ninterface CartItem {\n  _id: string;\n  productName: string;\n  productDescription: string;\n  productPrice: number;\n  quantity: number;\n  imageSrc: string;\n}\n\nexport const fetchUserCartFromDatabase = async (userId: string): Promise<CartItem[]> => {\n  try {\n    const response = await fetch(`${URL}/reactcart/${userId}`); // Adjust the API endpoint as per your backend setup\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.cartItems; // Assuming response data contains the cart items\n  } catch (error) {\n    console.error('Error fetching user cart:', error);\n    throw new Error('Failed to fetch user cart data');\n  }\n};\n\n\n  export const getAllProducts = async (): Promise<ProductType[]> => {\n    try {\n      const response = await fetch(`${URL}/products`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch products\");\n      }\n      const data: ProductType[] = await response.json();\n      console.log(data)\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      return []; // or handle error as needed (throw, return default data, etc.)\n    }\n  };\n  export const getProductById = async (id: string): Promise<ProductType> => {\n    try {\n      const response = await fetch(`${URL}/products/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch product');\n      }\n      const data: ProductType = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      throw error; // Rethrow the error or handle as needed\n    }\n  };\n  "],"mappings":"AAWE,MAAMA,GAAG,GAAG,uBAAuB;;AAErC;;AAUA,OAAO,MAAMC,yBAAyB,GAAG,MAAOC,MAAc,IAA0B;EACtF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,GAAG,cAAcE,MAAM,EAAE,CAAC,CAAC,CAAC;;IAE5D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,SAAS,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAM,IAAIL,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF,CAAC;AAGC,OAAO,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAoC;EAChE,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,GAAG,WAAW,CAAC;IAC/C,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,MAAME,IAAmB,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACjDG,OAAO,CAACE,GAAG,CAACN,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;AACD,OAAO,MAAMI,cAAc,GAAG,MAAOC,EAAU,IAA2B;EACxE,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,GAAG,aAAagB,EAAE,EAAE,CAAC;IACrD,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,MAAME,IAAiB,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC/C,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}