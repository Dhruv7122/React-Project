{"ast":null,"code":"const URL = 'http://localhost:8000';\nexport const loginUser = async (email, password) => {\n  try {\n    // Make sure both email and password are provided\n    if (!email || !password) {\n      throw new Error('Email and password are required');\n    }\n\n    // Define the endpoint URL where your backend is hosted\n    const endpoint = 'http://localhost:8000/login-user'; // Replace with your actual backend URL\n\n    // Make a POST request to the login endpoint\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n\n    // Handle the response from the server\n    if (!response.ok) {\n      const errorData = await response.json(); // Assuming server returns JSON error messages\n      throw new Error(errorData.message || 'Failed to login');\n    }\n\n    // Successful login, extract and return the user data\n    const userData = await response.json();\n    return userData;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error; // Rethrow the error to be handled by the caller\n  }\n};\nexport const registerUser = async (name, email, password) => {\n  try {\n    const response = await fetch(`${URL}/register-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw 'user is registered';\n      }\n      throw 'registration failed';\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["URL","loginUser","email","password","Error","endpoint","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","message","userData","error","console","registerUser","name","status","data"],"sources":["C:/DHRUV/reactTask/Archive/src/Service/auth.ts"],"sourcesContent":["const URL = 'http://localhost:8000'\n\nexport const loginUser = async (email: string, password: string) => {\n    try {\n      // Make sure both email and password are provided\n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n  \n      // Define the endpoint URL where your backend is hosted\n      const endpoint = 'http://localhost:8000/login-user'; // Replace with your actual backend URL\n  \n      // Make a POST request to the login endpoint\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n  \n      // Handle the response from the server\n      if (!response.ok) {\n        const errorData = await response.json(); // Assuming server returns JSON error messages\n        throw new Error(errorData.message || 'Failed to login');\n      }\n  \n      // Successful login, extract and return the user data\n      const userData = await response.json();\n      return userData;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error; // Rethrow the error to be handled by the caller\n    }\n  };\n  \n\n  export const registerUser = async (name: string, email: string, password: string) => {\n    try {\n        \n      const response = await fetch(`${URL}/register-user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n  \n      if (!response.ok) {\n        if (response.status === 400) {\n          throw 'user is registered';\n        }\n        throw 'registration failed';\n      }\n  \n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  "],"mappings":"AAAA,MAAMA,GAAG,GAAG,uBAAuB;AAEnC,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;EAChE,IAAI;IACF;IACA,IAAI,CAACD,KAAK,IAAI,CAACC,QAAQ,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;;IAEA;IACA,MAAMC,QAAQ,GAAG,kCAAkC,CAAC,CAAC;;IAErD;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;MACrCG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;;IAEF;IACA,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;MACzC,MAAM,IAAIX,KAAK,CAACU,SAAS,CAACE,OAAO,IAAI,iBAAiB,CAAC;IACzD;;IAEA;IACA,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;IACtC,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAGD,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAOC,IAAY,EAAEnB,KAAa,EAAEC,QAAgB,KAAK;EACnF,IAAI;IAEF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,GAAG,gBAAgB,EAAE;MACnDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAES,IAAI;QAAEnB,KAAK;QAAEC;MAAS,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,IAAIP,QAAQ,CAACgB,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,oBAAoB;MAC5B;MACA,MAAM,qBAAqB;IAC7B;IAEA,MAAMC,IAAI,GAAG,MAAMjB,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOQ,IAAI;EACb,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}